#. Practise with regex where I had to validate an IP address. There is actually a proper full notation for the regex of IP addresses but I decided to take a 
# more verbose option instead of copy pasting everything

import re


def main():
    print(validate(input("IPv4 Address: ")))


def validate(ip):
    if match := re.search(r"(.+)\.(.+)\.(.+)\.(.+)", ip):
        matches = match.groups()
        for numbers in matches:
            try:
                if int(numbers) >= 0 and int(numbers) <= 255:
                    pass
                else:
                    return False
            except ValueError:
                return False
    else:
        return False

    return True


if __name__ == "__main__":
    main()

#2. So far, the toughest regex I've had to do. I had to extract the Youtube URL from an embedded link. A lot of time spent on the logic of it but it can
# finally embed the two types of HTML from youtube

import re


def main():
    print(parse(input("HTML: ")))


def parse(s):
    if link := re.search(r'(?:.*)src="(?:.*)embed/(\w+)".*$', s):
        id = link.group(1)
        url = "https://youtu.be/" + id
        return url

    else:
        return f"None"



if __name__ == "__main__":
    main()

#3. Scratch the above, this is the toughest so far. My code is super verbose but i had to take in 2 different time formats (12:00 pm or 12 pm) and convert
# it to 24 hour format. Took me a good many hours to finish

import re
import sys


def main():
    print(convert(input("Hours: ")))


def convert(s):
    array = s.split(" ")
    if array[2] != "to":
        sys.exit("ValueError")

    first_n = array[0]
    first_w = array[1]
    second_n = array[3]
    second_w = array[4]


    if one := re.search("(.*):(.*)", first_n): #if the split works
        number1 = one.groups()
        two = re.search("(.*):(.*)", second_n)
        number2 = two.groups()

        if int(number1[0]) < 1 or int(number1[0]) > 12: #acceptable range check
            sys.exit("ValueError : 1")
        elif int(number1[1]) < 0 or int(number1[1]) > 59:
            sys.exit("ValueError : min 1")
        elif int(number2[0]) < 1 or int(number2[0]) > 12:
            sys.exit("ValueError : 2")
        elif int(number2[1]) < 0 or int(number2[1]) > 59:
            sys.exit("ValueError : min 2")

        if first_w.lower() == "am" and second_w.lower() == "pm": #am and pm
            time2 = int(number2[0]) + 12
            if int(time2) == 24:
                time2 = 12
            if int(number1[0]) == 12:
                 time1 = 0
                 return f"0{time1}:{number1[1]} to {time2}:{number2[1]}"

            return f"0{number1[0]}:{number1[1]} to {time2}:{number2[1]}"

        elif first_w.lower() == "am" and second_w.lower() == "am": #am and am
            return f"0{number1[0]}:{number1[1]} to 0{number2[0]}:{number2[1]}"

        elif first_w.lower() == "pm" and second_w.lower() == "pm": #pm and pm
            time1 = int(number1[0]) + 12
            time2 = int(number2[0]) + 12
            if time1 == 24:
                time1 == 0
            elif time2 == 24:
                time2 == 0
            return f"{time1}:{number1[1]} to {time2}:{number2[1]}"
        else: #pm and am
            time1 = int(number1[0]) + 12
            if time1 == 24:
                time1 == 0
            return f"{time1}:{number1[1]} to 0{number2[0]}:{number2[1]}"

    else: #if the split doesnt work
        if int(first_n) < 1 or int(first_n) > 12:
            sys.exit("ValueError 1")
        elif int(second_n) < 1 or int(second_n) > 12:
            sys.exit("ValueError 2")

        if first_w.lower() == "am" and second_w.lower() == "pm": #am and pm
            if int(first_n) == 12:
                first_n = 0

            time2 = int(second_n) + 12
            if int(time2) == 24:
                time2 = 12

            return f"0{first_n}:00 to {time2}:00"

        elif first_w.lower() == "am" and second_w.lower() == "am": #am and am:
                return f"0{first_n}:00 to 0{time2}:00"

        elif first_w.lower() == "pm" and second_w.lower() == "pm": #pm and pm:
            time1 = int(first_n) + 12
            time2 = int(second_n) + 12
            if time1 == 24:
                time1 == 0
            elif time2 == 24:
                time2 == 0
            return f"{time1}:00 to {time2}:00"
        else: #pm and am:
            time1 = int(first_n) + 12
            if time1 == 24:
                time1 == 0
            return f"{time1}:00 to 0{second_n}:00"



if __name__ == "__main__":
    main()

#4. Just had to write a program counting the number of 'um' (case-insensitively) in a sentence. I had to exclude words that start or end with um

import re


def main():
    print(count(input("Text: ")))


def count(s):
    number = 0
    times = re.findall((r"\bum\b"), s, re.IGNORECASE)
    for _ in times:
        number += 1
    return number


if __name__ == "__main__":
    main()

#5. 



