# Below are the series of PSETs for Week 3, a brief description for each problem will be at the start

#1. Checks a fraction and outputs where the level of the fuel gauge is. A bit of practise with try blocks and while blocks

def main():
    fraction = get_fraction("Fraction: ")

    #Prints a different text depending on the fuel gauge
    if fraction <= 1:
        print("E")
    elif fraction >= 99:
        print("F")
    else:
        print(f"{fraction:.0f}%")


def get_fraction(text):
    while True:
        try:
            #see whether the I get a value error or x is more than y
            x, y = input(text).split('/')
            total = int(x) / int(y) * 100
            if int(x) > int(y):
                raise ValueError
        except (ValueError, ZeroDivisionError):
            pass
        else:
            return total

main()

#2. Check user input from a menu and print out its key until the user types Control-D

def main():
    menu = {
    "Baja Taco": 4.00,
    "Burrito": 7.50,
    "Bowl": 8.50,
    "Nachos": 11.00,
    "Quesadilla": 8.50,
    "Super Burrito": 8.50,
    "Super Quesadilla": 9.50,
    "Taco": 3.00,
    "Tortilla Salad": 8.00
    }

    sum = 0
    while True:
        try:
            text = input('Item: ').title()
            if text in menu:
                sum += menu[text]
                print(f'Total: ${sum:.2f}')
        except EOFError:
            break
    print()
main()

#3. Learnt to add user input to a dictionary and sort it in alphabetical order

#create an empty list dict. Key = sum and Value = grocery
#keep trying to add user input to dict. If there's a duplicate, increase count by one
#print the list in alphabetical order and in all caps alongside the sum of the ingredients

def main():
    cart = {}

    while True:
        try:
            grocery = input().upper()

            if grocery in cart:
                cart[grocery] += 1
            else:
                cart[grocery] = 1
        except EOFError:
            for grocery in sorted(cart.keys()):
                print(cart[grocery], grocery)
            break

    print()

main()

#4. Seperates user input of month-day-year to year-month-day. I made a program that would strip ',' and '/' at once but CS50 is quite particular on the
#type of inputs it accepts. I can't pass all of the checks but here's my version which I argue is more robust

def main():
    #get user input
    #input can be number or month
    #if month, then get index + 1 for month number

    months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
    ]

    while True:
        try:
            #Divides into month-day-year
            x, y, z = input("Date: ").strip().replace('/', ' ').split(' ')
            y = y.replace(',','')
            if int(y) > 30:
                raise ValueError

            if x.isdigit() != True:
                if x.title() not in months:
                    raise ValueError
            elif int(x) > 12:
                raise ValueError
        except ValueError:
            pass
        else:
            break

    #Print year-month-day
    if x.isdigit() == True:
        print(f"{z}-{int(x):02}-{int(y):02}")
    else:
        x = months.index(x) + 1
        print(f"{z}-{int(x):02}-{int(y):02}")

main()

#3. Had to implement a test for PSET 3. Spent a lot of time figuring out the logic behind pytest.raises() function but I finally realised that in my
# main code, i just had to 'raise' for that error to be picked up by Pytest

from fuel import convert, gauge
import pytest

def test_ValueError():
    with pytest.raises(ValueError):
        convert("cat/dog")

    with pytest.raises(ZeroDivisionError):
        convert("1/0")


def test_convert():
    assert convert("1/2") == 50.0
    assert convert("1/100") == 1.0
    assert convert("100/100") == 100.0
    assert convert("99/100") == 99.0

def test_gauge():
    assert gauge(50.0) == "50.0%"
    assert gauge(1.0) == "E"
    assert gauge(100.0) == "F"
    assert gauge(99.0) == "F"
