#1. Practise with File I/O which is one of my weaker topics. Had a bit of fun programming a program that reads how many lines of text there are ignoring
# whitespaces and comments that start with "#" 

import sys


def main():
    count = 0

    # only accept 1 CLA
    # Error for too few or too many or invalid extension '.py'
    if len(sys.argv) == 1:
        sys.exit("Too few command-line arguments")
    elif len(sys.argv) > 2:
        sys.exit("Too many command-line arguments")

    if sys.argv[1].endswith(".py") != True:
        sys.exit("Not a Python file")

    # try to open file unless error
    try:
        with open(sys.argv[1]) as file:
            lines = file.readlines()
    except FileNotFoundError:
        sys.exit("File does not exist")

    # count number of lines. Read each row and add 1 to count
    # comments and white spaces don't count
    for line in lines:
        if line.lstrip().startswith("#"):
            continue
        elif line.strip() == "":
            continue
        else:
            count += 1

    print(count)


main()

#2. A bit of practise with csv.DictReader(). A bit of the same as the above except that I had to take in user input to one of 2 menus and output a menu
# with ASCII art from the tabulate package

import csv
import sys
from tabulate import tabulate

def main():

    menu = []
    if len(sys.argv) == 1:
        sys.exit("Too few command-line arguments")
    elif len(sys.argv) > 2:
        sys.exit("Too many command-line arguments")

    if sys.argv[1].endswith(".csv") != True:
        sys.exit("Not a CSV file")

    # try to open file unless error
    try:
        with open(sys.argv[1]) as file:
            lines = csv.DictReader(file)

            for line in lines:
                menu.append(line)

    except FileNotFoundError:
        sys.exit("File does not exist")


    print(tabulate(menu, headers="keys", tablefmt="grid"))

main()

#3. For this task, I had to open up one file and read it into another with different headings. I struggled quite a bit with the logic of opening one file # and reading it into another. Eventually after a bit of searching did I get it. Still a bit shaky but will review it again tomorrow

import sys
import csv


def main():
    students = []

    if len(sys.argv) < 3:
        sys.exit("Too few command-line arguments")
    elif len(sys.argv) > 3:
        sys.exit("Too many command-line arguments")

    # try to open file unless error
    try:
        with open(sys.argv[1]) as file:
            reader = csv.DictReader(file)
            for row in reader:
                last, first = row["name"].split(", ")
                students.append({"last": last, "first": first, "house": row["house"]})

    except FileNotFoundError:
        sys.exit(f"Could not read {sys.argv[1]}")

    with open(sys.argv[2], "w") as output:
        writer = csv.DictWriter(output, fieldnames=["first", "last", "house"])
        writer.writeheader()
        for row in students:
            writer.writerow(row)


main()

#4. Practise cropping one image over another using the PIL package. Had a bit of trouble understanding the process for copy and pasting images at first

import sys
import os
from PIL import Image
from PIL import ImageOps

def main():
    #these checks whether there's 2 CLA arguments and whether both arguments match each other in extensions
    if len(sys.argv) < 3:
        sys.exit("Too few command-line arguments")
    elif len(sys.argv) > 3:
        sys.exit("Too many command-line arguments")

    input = os.path.splitext(sys.argv[1])
    output = os.path.splitext(sys.argv[2])
    suffixes = (".jpg", ".jpeg", ".png")

    if sys.argv[1].endswith(suffixes) != True:
        sys.exit("Wrong extension for input file")

    elif sys.argv[2].endswith(suffixes) != True:
        sys.exit("Wrong extension for output file")

    elif input[1] != output[1]:
        sys.exit("Need similar extensions for both input and output")
    
    #Cropping images
    try:
        with Image.open(sys.argv[1]) as file:
            shirt = Image.open("shirt.png")
            size = shirt.size
            new = ImageOps.fit(file, size)
            new.paste(shirt, shirt)
            new.save(sys.argv[2])

    except FileNotFoundError:
        sys.exit("File not found")


main()
